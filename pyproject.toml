[project]
name = "mlflow-dep-analyzer"
version = "0.1.0"
description = "Smart dependency analysis and minimal requirements generation for MLflow models"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
keywords = ["mlflow", "dependencies", "requirements", "analysis", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
urls.homepage = "https://github.com/your-username/mlflow-dep-analyzer"
urls.repository = "https://github.com/your-username/mlflow-dep-analyzer"
urls.documentation = "https://github.com/your-username/mlflow-dep-analyzer#readme"
urls.issues = "https://github.com/your-username/mlflow-dep-analyzer/issues"

dependencies = [
    # Core dependencies - minimal and focused
    "mlflow>=2.0.0",  # Core MLflow dependency
]

# Optional dependencies for enhanced functionality
[project.optional-dependencies]
dev = [
    # Development and testing
    "mlflow[gateway]>=2.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "mypy>=1.0.0",
    "types-setuptools",
    "scikit-learn>=1.0.0",
    "pandas>=1.3.0",
    "numpy>=1.20.0",
    "matplotlib>=3.0.0",
]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[dependency-groups]
dev = [
  "pytest==7.4.0",
  "pytest-asyncio==0.21.1",
  "pytest-xdist==3.3.1",
  "pre-commit>=3.0.0",
  "ruff>=0.7.0",
  "isort>=5.12.0",
]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
